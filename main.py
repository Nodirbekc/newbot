import os
import telebot
from flask import Flask, request
import requests
import pytz
from datetime import datetime, timedelta

# === API –∫–ª—é—á–∏ –∏–∑ Render ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWM_API = os.getenv("OWM_API")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏
user_last_city = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def main_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü–æ–≥–æ–¥–∞", "–ö—É—Ä—Å", "–ò–ò")
    return kb

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "hillow hillow", reply_markup=main_keyboard())

# === –ü–æ–≥–æ–¥–∞ ===
@bot.message_handler(func=lambda m: m.text == "–ü–æ–≥–æ–¥–∞")
def weather_request(message):
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?")

@bot.message_handler(func=lambda m: m.text not in ["–ü–æ–≥–æ–¥–∞", "–ö—É—Ä—Å", "–ò–ò"] and message_has_weather_context(m))
def weather_response(message):
    city = message.text.strip()
    user_last_city[message.from_user.id] = city
    send_weather_info(message.chat.id, city)

def message_has_weather_context(message):
    return user_last_city.get(message.from_user.id, None) is None or message.text.lower() not in ["–∫—É—Ä—Å", "–∏–∏"]

def send_weather_info(chat_id, city):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&lang=ru&appid={OWM_API}"
    res = requests.get(url)
    if res.status_code != 200:
        bot.send_message(chat_id, "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    data = res.json()
    current = data["list"][0]
    temp = current["main"]["temp"]
    feels = current["main"]["feels_like"]
    wind = current["wind"]["speed"]
    desc = current["weather"][0]["description"]
    humidity = current["main"]["humidity"]

    emoji = "ü•∂" if temp < 0 else "üòé" if temp > 30 else "üôÇ"
    text = (f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {data['city']['name']} ({data['city']['country']}):\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"–û—Å–∞–¥–∫–∏: {desc}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n"
            "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:\n")
    for i in range(1, 4):
        day = data["list"][i*8]
        date = datetime.utcfromtimestamp(day["dt"]) + timedelta(hours=data["city"]["timezone"]/3600)
        text += f"- {date.strftime('%d.%m %H:%M')}: {day['main']['temp']}¬∞C, {day['weather'][0]['description']}\n"
    bot.send_message(chat_id, text)

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç ===
@bot.message_handler(func=lambda m: m.text == "–ö—É—Ä—Å")
def ask_currency(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –≤–∞–ª—é—Ç—É –∏ –≤–æ —á—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `10 BTC USD` –∏–ª–∏ `100 USD UZS`).")

@bot.message_handler(func=lambda m: len(m.text.split()) == 3 and m.text not in ["–ü–æ–≥–æ–¥–∞", "–ò–ò"])
def convert_currency(message):
    try:
        amount, from_cur, to_cur = message.text.upper().split()
        amount = float(amount)
        url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/pair/{from_cur}/{to_cur}/{amount}"
        r = requests.get(url)
        data = r.json()
        if r.status_code == 200 and data["result"] == "success":
            result = data["conversion_result"]
            bot.send_message(message.chat.id, f"{amount} {from_cur} = {result} {to_cur}")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.")
    except:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: `10 BTC USD`")

# === –ß–∞—Ç —Å –ò–ò ===
@bot.message_handler(func=lambda m: m.text == "–ò–ò")
def ask_ai(message):
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ò–ò:")

@bot.message_handler(func=lambda m: user_last_city.get(m.from_user.id) and m.text not in ["–ü–æ–≥–æ–¥–∞", "–ö—É—Ä—Å", "–ò–ò"])
def ai_answer(message):
    query = message.text.strip()
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": query}]
    }
    res = requests.post("https://openrouter.ai/api/v1/chat/completions", json=body, headers=headers)
    if res.status_code == 200:
        ans = res.json()["choices"][0]["message"]["content"]
        bot.send_message(message.chat.id, ans)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò.")

# === Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{os.getenv('RENDER_EXTERNAL_URL')}/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
