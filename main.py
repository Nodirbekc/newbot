import os
import logging
import requests
import pytz
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
import openai

# === –õ–û–ì–ò ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# === API –∫–ª—é—á–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWM_API = os.getenv("OWM_API")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

openai.api_key = OPENROUTER_API_KEY
openai.api_base = "https://openrouter.ai/api/v1"

# === –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–æ–≤ ===
last_city = {}

# === –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ===
def temp_emoji(temp):
    if temp <= 0:
        return "ü•∂"
    elif temp < 20:
        return "üôÇ"
    else:
        return "ü•µ"

# === –ü–æ–≥–æ–¥–∞ ===
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) == 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
        return

    city = " ".join(context.args)
    last_city[chat_id] = city
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API}&units=metric&lang=ru"
    res = requests.get(url).json()

    if res.get("cod") != 200:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥.")
        return

    sunrise = datetime.utcfromtimestamp(res["sys"]["sunrise"] + res["timezone"]).strftime("%H:%M")
    sunset = datetime.utcfromtimestamp(res["sys"]["sunset"] + res["timezone"]).strftime("%H:%M")
    temp = res["main"]["temp"]
    text = (
        f"–ü–æ–≥–æ–¥–∞ –≤ {res['name']} ({res['sys']['country']}): {temp}¬∞C {temp_emoji(temp)}\n"
        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {res['main']['feels_like']}¬∞C\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {res['main']['humidity']}%\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {res['main']['pressure']} hPa\n"
        f"–í–µ—Ç–µ—Ä: {res['wind']['speed']} –º/—Å\n"
        f"–û—Å–∞–¥–∫–∏: {res['weather'][0]['description']}\n"
        f"–í–æ—Å—Ö–æ–¥: {sunrise}, –ó–∞–∫–∞—Ç: {sunset}"
    )
    await update.message.reply_text(text)

# === –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (5 –¥–Ω–µ–π) ===
async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    city = last_city.get(chat_id)
    if not city:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É: /weather <–≥–æ—Ä–æ–¥>")
        return

    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_API}&units=metric&lang=ru"
    res = requests.get(url).json()
    if res.get("cod") != "200":
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    forecast_text = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city}:\n"
    for entry in res["list"][:5]:
        dt = entry["dt_txt"]
        temp = entry["main"]["temp"]
        desc = entry["weather"][0]["description"]
        forecast_text += f"{dt}: {temp}¬∞C, {desc}\n"

    await update.message.reply_text(forecast_text)

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç ===
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /convert <—Å—É–º–º–∞> <–∏–∑> <–≤>")
        return

    amount, from_currency, to_currency = context.args
    try:
        amount = float(amount)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return

    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/{from_currency.upper()}"
    res = requests.get(url).json()
    if res.get("result") != "success":
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    rate = res["conversion_rates"].get(to_currency.upper())
    if not rate:
        await update.message.reply_text("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    result = amount * rate
    await update.message.reply_text(f"{amount} {from_currency.upper()} = {result:.2f} {to_currency.upper()}")

# === GPT ===
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gpt <–∑–∞–ø—Ä–æ—Å>")
        return

    prompt = " ".join(context.args)
    response = openai.ChatCompletion.create(
        model="openai/gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    answer = response["choices"][0]["message"]["content"]
    await update.message.reply_text(answer)

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([["–ü–æ–≥–æ–¥–∞"]], resize_keyboard=True)
    await update.message.reply_text("hillow hillow", reply_markup=keyboard)

# === –ì—Ä—É–ø–ø–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä ===
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø–æ–≥–æ–¥–∞" in text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /weather <–≥–æ—Ä–æ–¥>")

# === MAIN ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("forecast", forecast))
    app.add_handler(CommandHandler("convert", convert))
    app.add_handler(CommandHandler("gpt", gpt))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))
    app.run_webhook(listen="0.0.0.0", port=int(os.environ.get("PORT", 5000)),
                    webhook_url=f"{os.getenv('RENDER_EXTERNAL_URL')}/{BOT_TOKEN}")

if __name__ == "__main__":
    main()
