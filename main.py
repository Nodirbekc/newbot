import os
import logging
import requests
import pytz
from datetime import datetime
from flask import Flask, request
from telebot import TeleBot, types
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWM_API_KEY = os.getenv("OWM_API")

if not BOT_TOKEN or not OWM_API_KEY:
    raise Exception("BOT_TOKEN –∏–ª–∏ OWM_API –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

user_last_city = {}

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–≥–æ–¥–∞"
def weather_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")
    markup.add(btn)
    return markup

# /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.send_message(message.chat.id, "hillow hillow", reply_markup=weather_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
@bot.message_handler(func=lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city(message):
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
@bot.message_handler(func=lambda m: True)
def send_weather(message):
    chat_id = message.chat.id
    city = message.text.strip()
    user_last_city[message.from_user.id] = city

    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
    forecast_url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"

    try:
        r = requests.get(url).json()
        f = requests.get(forecast_url).json()

        if r.get("cod") != 200:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        temp = r["main"]["temp"]
        desc = r["weather"][0]["description"].capitalize()
        humidity = r["main"]["humidity"]
        wind = r["wind"]["speed"]
        sunrise = datetime.utcfromtimestamp(r["sys"]["sunrise"]).strftime('%H:%M')
        sunset = datetime.utcfromtimestamp(r["sys"]["sunset"]).strftime('%H:%M')

        emoji = "üôÇ"
        if temp <= 0:
            emoji = "ü•∂"
        elif temp >= 30:
            emoji = "ü•µ"

        msg = (
            f"–ü–æ–≥–æ–¥–∞ –≤ {city} —Å–µ–π—á–∞—Å:\n"
            f"{emoji} {desc}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} UTC\n"
            f"üåá –ó–∞–∫–∞—Ç: {sunset} UTC\n\n"
            f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:\n"
        )

        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è (—Ä–∞–∑ –≤ 24 —á, 12:00)
        days_added = set()
        for item in f["list"]:
            dt = datetime.utcfromtimestamp(item["dt"])
            if dt.hour == 12 and dt.date() not in days_added:
                day_str = dt.strftime("%d.%m")
                temp_day = item["main"]["temp"]
                description = item["weather"][0]["description"].capitalize()
                pop = item.get("pop", 0)
                chance = f"{int(pop * 100)}%"
                msg += f"üìÜ {day_str}: {description}, {temp_day}¬∞C, –æ—Å–∞–¥–∫–∏: {chance}\n"
                days_added.add(dt.date())
                if len(days_added) >= 3:
                    break

        bot.send_message(chat_id, msg)

    except Exception as e:
        logging.exception(e)
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")

# Flask webhook
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "OK", 200

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ URL –æ—Ç Render
if __name__ == "__main__":
    render_url = os.getenv("RENDER_EXTERNAL_URL")
    if not render_url:
        raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")

    bot.remove_webhook()
    bot.set_webhook(url=f"{render_url}/{BOT_TOKEN}")

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
