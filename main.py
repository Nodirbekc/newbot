import os
import requests
import logging
from datetime import datetime
from flask import Flask, request
import pytz
from telebot import TeleBot, types

TOKEN = os.getenv("BOT_TOKEN")
OWM_API_KEY = os.getenv("OWM_API")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")  # –¥–æ–±–∞–≤—å –≤ Render

bot = TeleBot(TOKEN)
app = Flask(__name__)
user_last_city = {}

logging.basicConfig(level=logging.INFO)

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"), types.KeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"))
    return markup

# --- –≠–º–æ–¥–∑–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ ---
def get_temp_emoji(temp):
    if temp <= 0:
        return "ü•∂"
    elif temp >= 30:
        return "ü•µ"
    else:
        return "üòä"

# --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ---
def format_time(timestamp, timezone_str):
    tz = pytz.timezone(timezone_str)
    dt = datetime.utcfromtimestamp(timestamp).replace(tzinfo=pytz.utc).astimezone(tz)
    return dt.strftime('%H:%M')

# --- –°—Ç–∞—Ä—Ç ---
@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.send_message(
        message.chat.id,
        "hillow hillow!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda msg: msg.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:")

@bot.message_handler(func=lambda msg: msg.text == "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def ask_currency_type(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR, BTC):")

# --- –ü–æ–≥–æ–¥–∞ ---
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
    res = requests.get(url).json()

    if res.get("cod") != 200:
        return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    name = res["name"]
    temp = res["main"]["temp"]
    weather = res["weather"][0]["description"]
    humidity = res["main"]["humidity"]
    wind_speed = res["wind"]["speed"]
    sunrise = res["sys"]["sunrise"]
    sunset = res["sys"]["sunset"]
    emoji = get_temp_emoji(temp)
    timezone_offset = res["timezone"]
    timezone_name = pytz.timezone("Asia/Tashkent")  # –∏–ª–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é

    sunrise_local = format_time(sunrise, "Asia/Tashkent")
    sunset_local = format_time(sunset, "Asia/Tashkent")

    return (
        f"üìç {name}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C {emoji}\n"
        f"‚òÅ –ü–æ–≥–æ–¥–∞: {weather}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise_local}\n"
        f"üåá –ó–∞–∫–∞—Ç: {sunset_local}"
    )

# --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
def get_exchange(currency_code):
    try:
        url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/{currency_code.upper()}"
        res = requests.get(url).json()
        if res["result"] != "success":
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞."
        rates = res["conversion_rates"]
        return (
            f"üí± 1 {currency_code.upper()}:\n"
            f"üá∫üáø UZS: {rates['UZS']}\n"
            f"üá∑üá∫ RUB: {rates['RUB']}\n"
            f"üá∞üáø KZT: {rates['KZT']}\n"
            f"üá∫üá∏ USD: {rates['USD']}\n"
            f"üá™üá∫ EUR: {rates['EUR']}"
        )
    except:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda msg: True, content_types=["text"])
def general_handler(message):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã
    if user_last_city.get(message.from_user.id) == "awaiting_city":
        user_last_city[message.from_user.id] = text
        bot.send_message(message.chat.id, get_weather(text))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    if user_last_city.get(message.from_user.id) == "awaiting_currency":
        user_last_city[message.from_user.id] = None
        bot.send_message(message.chat.id, get_exchange(text))
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    if text.lower() in ["–ø–æ–≥–æ–¥–∞", "üå§ –ø–æ–≥–æ–¥–∞"]:
        user_last_city[message.from_user.id] = "awaiting_city"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    elif text.lower() in ["–∫—É—Ä—Å", "üí± –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"]:
        user_last_city[message.from_user.id] = "awaiting_currency"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä USD, BTC):")

    # –ò—Å—Ç–æ—Ä–∏—è
    elif text.lower() == "–∏—Å—Ç–æ—Ä–∏—è":
        last = user_last_city.get(message.from_user.id)
        bot.send_message(message.chat.id, f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last}")
    elif "–ø–æ–≥–æ–¥–∞" in text.lower():
        city = text.split("–ø–æ–≥–æ–¥–∞")[-1].strip()
        bot.send_message(message.chat.id, get_weather(city))
    elif "–∫—É—Ä—Å" in text.lower():
        code = text.split("–∫—É—Ä—Å")[-1].strip()
        bot.send_message(message.chat.id, get_exchange(code))

# --- Webhook ---
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{os.environ.get('RENDER_EXTERNAL_URL')}/{TOKEN}")
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
